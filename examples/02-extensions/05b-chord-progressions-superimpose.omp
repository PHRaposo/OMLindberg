; OM File Header - Saved 2023/05/05 21:57:14
; (7.02 :patc (om-make-point 16 402) (om-make-point 50 50) (om-make-point 1037 705) "" 183 0 "2023/05/05 21:37:49" "2023/05/05 21:40:53")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../../../Users/phraposo/OM/Libraries/OMLindberg 1.0/resources/Var-1-reduction.mid\""))
(in-package :om)(load-lib-for (quote ("OMLindberg")))(setf *om-current-persistent* (om-load-patch1 "05b-chord-progressions-superimpose" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 306 31) (quote "LINDBERG'S JOY - VARIATIONS") "" (om-make-point 105 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 235 45) (quote "VARIATION-1 (REDUCTION)$- MIDI FILE IN RESOURCES FOLDER") "" (om-make-point 711 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 572 292) (om-make-point 371 150) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7300 7300) (7600) (6600 7300) (6600) (6000 7600 7300 6600 6000) (8000 7700 7000 6400) (7400 7100 5800) (7900 7200 6600) (8700 7700 7100) (8500 8400 7700 7500 7100 6900 8500 8200 7500 6900) (7800 6800 6200) (7900 7600 6900 6300) (7600 7300 6600 6000))) :lonset (quote (0 1875 2031 2188 2344 2500 4375 6250 8999 9499 11875 13750 16250 16665 16875)) :ldur (quote ((1875) (313 156) (157) (312 156) (156) (312 312 312 312 312) (313 313 313 3281) (1406 1406 1406) (125 125 125) (125 125 125) (4375 4375 4375 4375 4531 4531 313 313 2187 313) (312 312 312) (415 415 415 415) (210 210 210 210))) :lvel (quote ((81) (113 115) (117) (107 111) (98) (107 127 127 127 127) (116 116 116 116) (117 117 117) (113 113 113) (117 117 117) (120 120 120 120 120 120 120 120 120 120) (119 119 119) (120 120 120 120) (111 111 111 111))) :loffset (quote ((0) (0 0) (0) (0 0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1) (1 1) (1) (1 1) (1) (1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300 6600 6000) (8000 7700) (7400 7100 6400 5800) (7900 7200 6600 8200) (8400 7700 7100) (8500 8200 7500 6900) (7800 6800 6200) (7900 7600 6900 6300) (7900 7600 6900 6300))) :lonset (quote (5208 6250 7656 10312 11875 14531 15625 16250 16665 18281)) :ldur (quote ((207 207 207) (1406 1406) (1094 1094 1094 1094) (1719 1719 1719 4688) (156 156 156) (469 1094 469 469) (156 156 156) (625 625 625 1875) (1616 1616 1616 1616))) :lvel (quote ((76 76 76) (81 81) (75 75 75 75) (76 76 76 76) (81 81 81) (76 76 76 76) (76 76 76) (81 81 81 81) (76 76 76 76))) :loffset (quote ((0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((2 2 2) (2 2) (2 2 2 2) (2 2 2 2) (2 2 2) (2 2 2 2) (2 2 2) (2 2 2 2) (2 2 2 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0 0) (0) (0 0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0)) ((0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 841 389) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Var-1-reduction.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 641 216) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "phraposo" "OM" "Libraries" "OMLindberg 1.0" "resources")) :device nil :host nil :name "Var-1-reduction" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Var-1-reduction.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport player deltapict zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list 0 (quote :midi-player) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) (quote t) nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 598 10) (om-make-point 63 75) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2400 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 607 306) (om-make-point 300 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 667 30) (om-make-point 91 30) (list 8 11 17 20) "(8 11 17 20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HARMONIC-SERIES" (quote omlindberg::harmonic-series) (quote ((om-load-inputfun (quote input-funbox) "midics" "FUNDAMENTAL" 2400) (om-load-inputfun (quote input-funbox) "list" "PARTIALS" (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)) (om-load-inputfun (quote input-funbox) "integer" "APPROX" 2))) (om-make-point 612 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 34 567) (om-make-point 812 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6600 7300 7600) (7000 7700 8000) (6400 7000 7700 8000) (6000 6600 7300) (6400 7000 7700 8000) (7100 7400) (5800 6400 7100 7400) (7700 8000) (5800 6400 7100 7400) (6600 7200 7900) (6600 7200 7900 8200) (6400 7100 7400) (6600 7200 7900 8200) (7100 7700 8700) (7100 7700 8400 8700) (6600 7900 8200) (7100 7700 8400 8700) (6900 8200 8500) (6900 7500 8200 8500) (7100 7700 8400) (6900 7500 8200 8500) (6200 6800 7800) (6200 6800 7500 7800) (6900 8200 8500) (6200 6800 7500 7800) (6900 7600 7900) (6300 6900 7600 7900) (6200 6800 7800) (6300 6900 7600 7900) (6000 6600 7300) (6000 6600 7300 7600) (6300 6900 7900))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16500)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 566 301) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERIMPOSE" (quote omlindberg::superimpose) (quote ((om-load-inputfun (quote input-funbox) "list-of-midicents" "CHORDS" (list (list 6000 6600 7300 7600) (list 6400 7000 7700 8000) (list 5800 6400 7100 7400) (list 6600 7200 7900 8200) (list 7100 7700 8400 8700) (list 6900 7500 8200 8500) (list 6200 6800 7500 7800) (list 6300 6900 7600 7900))))) (om-make-point 100 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "transpositions" (om-load-patch-abs1 "transpositions" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 281 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 192 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 194 476) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 1 (om-make-point 251 39) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ground" 0 (om-make-point 56 33) "" "ground" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 97 135) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 41 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 77 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 151 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 193 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 46 271) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (8 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 6 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (10 0 8 0 nil 0) (7 0 8 1 nil 0) (3 0 9 0 nil 0) (9 0 10 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 466/3 620/3) nil (list (list (list 6000 6600 7300 7600) (list 6400 7000 7700 8000) (list 5800 6400 7100 7400) (list 6600 7200 7900 8200) (list 7100 7700 8400 8700) (list 6900 7500 8200 8500) (list 6200 6800 7500 7800) (list 6300 6900 7600 7900) (list 6000 6600 7300 7600))) nil "transpositions"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 61 325) (om-make-point 463 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6600 7300 7600) (6400 7000 7700 8000) (5800 6400 7100 7400) (6600 7200 7900 8200) (7100 7700 8400 8700) (6900 7500 8200 8500) (6200 6800 7500 7800) (6300 6900 7600 7900) (6000 6600 7300 7600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 566 301) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 457 158) (om-make-point 65 97) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6600 7300 7600)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 675 401) 3 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 71) (om-make-point 406 95) (let ((newobj (when (find-class (quote chord-seq) nil) (let ((rep (make-instance (quote chord-seq) :lmidic (quote ((4800) (5200) (4600) (5400) (5900) (5700) (5000) (5100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0))) (restore-tonalite rep (quote (((2 0) (make-instance (quote simple-tonalite) :tonnote (quote si) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100)))) ((7 0) (make-instance (quote simple-tonalite) :tonnote (quote mi) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100))))))) rep)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 763 266) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (4 1 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 1 nil 0) (10 1 8 0 nil 0) (12 1 9 0 nil 0) (11 1 9 1 nil 0) (9 0 10 1 nil 0) (6 0 11 1 nil 0))) nil 7.02))
