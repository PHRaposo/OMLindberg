; OM File Header - Saved 2023/05/05 21:27:51
; (7.02 :patc (om-make-point 149.0D0 375) (om-make-point 58 23) (om-make-point 1158 704) "" 183 0 "2023/04/26 00:42:48" "2023/05/05 21:27:49")
; End File Header
(in-package :om)(load-lib-for (quote ("OMLindberg")))(setf *om-current-persistent* (om-load-patch1 "06-reconstruction-d-un-accord" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 131 30) (quote "RECONSTRUCTION") "" (om-make-point 514 511) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 543 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 787 381) (om-make-point 283 286) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 259 266) "untitled"))) (om-set-dialog-item-text rep "
 
midics: (3600 3900 4100 4200 4400 4800) 
oct: (3 3 3 3 3 4)
pth: (0 3 5 6 8 0) 
pth-asc: (0 0 3 5 6 8)
ord: (0 2 3 4 5 1)
------------------------- 
pth-cnt: (2 1 1 1 1)
pth-uni: (0 3 5 6 8)
------------------------- 
pr: (0 2 3 5 8)
normal:(0 3 5 6 8)
fl1: 0 
fl2: 1
-------------------------
first: 8
ref: (4 3 2 1 0)") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 306 313) (quote "<midics> MIDICENTS.$<oct> OCTAVES.$<pth> PITCH CLASSES.$<pth-asc> PCS IN ASCENDING ORDER.$<ord> POSITIONS OF <pth> IN <pth-asc> LIST.$<pth-cnt> REPETITIONS.$<pth-uni> NO DUPLICATES.$<pr> PRIME FORM.$<normal> NORMAL ORDER.$<fl1> EQUIVALENT POSITION OF THE FIRST NOTE OF THE PRIMAL FORM IN <pth-uni>.$<fl2> IF PRIME FORM IS EQUAL TO DIRECT PRIME FORM, fl2 = 0, OTHERWISE fl2 = 1.$<FIRST> TRANSPOSITION OF THE PRIME-FORM. IF fl2 = 0, FIRST PC IN NORMAL ORDER LIST, OTHERWISE LAST PC IN THE NORMAL ORDER LIST.$<REF> POSITIONS OF <pth-uni> IN NORMAL ORDER LIST.$$ ") "" (om-make-point 807 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 324 25) (quote "CALCULATION OF ALL PARAMETERS OF A CHORD") "" (om-make-point 803 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 6 286) (om-make-point 446 59) nil nil nil 13))) (setf (numouts box) 13) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-OCT" (quote omlindberg::approx-oct) (quote ((om-load-inputfun (quote input-funbox) "midics'" "MIDICS" (list 3600 3900 4100 4200 4400 4800)) (om-load-inputfun (quote input-funbox) "pc-set" "PCS" (list 1 3 5 6 8 1)))) (om-make-point 26 577) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 335 12) (om-make-point 335 128) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (3900) (4100) (4200) (4400) (4800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 477 287) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pth-uni-pth-cnt->pth-asc" (om-load-patch-abs1 "pth-uni-pth-cnt->pth-asc" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 181 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pth-uni" 1 (om-make-point 274 61) "" "pth-uni" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pth-cnt" 0 (om-make-point 196 12) "" "pth-cnt" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 182 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 171 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 85 51) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 4 2 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 536/3 1325/3) nil (list (list 0 0 3 5 6 8)) nil "pth-uni-pth-cnt->pth-asc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first->normal-ref->pth-uni" (om-load-patch-abs1 "first->normal-ref->pth-uni" (quote ((let ((box (om-load-boxin "ref" 3 (om-make-point 510 306) "" "ref" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "first" 2 (om-make-point 361 14) "" "first" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "prime" 1 (om-make-point 229 12) "" "prime" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fl2" 0 (om-make-point 134 12) "" "fl2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 312 1511/3) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12 2" (quote omlindberg::mod12) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "NUMBERS" -4))) (om-make-point 823/3 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 856/3 187) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 616/3 196) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 568/3 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 451/3 318) (om-make-point 292 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1126/3 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 1042/3 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12" (quote omlindberg::mod12) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "NUMBERS" -4))) (om-make-point 1099/3 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 4 0 nil 0) (6 0 5 0 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0) (3 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 0 nil 0) (5 0 9 1 nil 0) (12 0 9 2 nil 0) (1 0 10 0 nil 0) (2 0 10 1 nil 0) (9 0 11 0 nil 0) (0 0 11 1 nil 0) (10 0 12 0 nil 0))) 7.02 nil "" (om-make-point 224 74) (om-make-point 652 616)) (quote ((om-load-inputfun (quote input-funbox) "" "fl2" nil) (om-load-inputfun (quote input-funbox) "" "prime" nil) (om-load-inputfun (quote input-funbox) "" "first" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2847/8 3061/8) nil (list (list 0 3 5 6 8)) nil "first->normal-ref->pth-uni"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAR" (quote omlindberg::par) (quote ((om-load-inputfun (quote input-funbox) "list in midicents" "CHORD" (list 3600 3900 4100 4200 4400 4800)))) (om-make-point 590 209) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 550) (om-make-point 332 135) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (3900) (4100) (4200) (4400) (4800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 477 287) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pth-asc-ord->pth" (om-load-patch-abs1 "pth-asc-ord->pth" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 340) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pth-asc" 1 (om-make-point 413/3 206/3) "" "pth-asc" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ord" 0 (om-make-point 55 66) "" "ord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH 2" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 60 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 75 511) nil (list (list 0 3 5 6 8 0)) nil "pth-asc-ord->pth"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 1 1 0 nil 0) (10 1 2 0 nil 0) (10 0 5 0 nil 0) (5 0 6 0 nil 0) (12 0 6 1 nil 0) (5 5 8 0 nil 0) (9 0 8 1 nil 0) (5 10 9 0 nil 0) (5 7 9 1 nil 0) (5 11 9 2 nil 0) (5 12 9 3 nil 0) (1 0 10 0 nil 0) (6 0 11 1 nil 0) (5 4 12 0 nil 0) (8 0 12 1 nil 0))) nil 7.02))
