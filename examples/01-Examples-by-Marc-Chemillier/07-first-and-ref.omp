; OM File Header - Saved 2023/05/05 21:28:36
; (7.02 :patc (om-make-point 642.0D0 10) (om-make-point 8 23) (om-make-point 755 712) "" 183 0 "2023/04/26 00:59:25" "2023/05/05 21:27:54")
; End File Header
(in-package :om)(load-lib-for (quote ("OMLindberg")))(setf *om-current-persistent* (om-load-patch1 "07-first-and-ref" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 6" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 324 664) (om-make-point 80 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 52 20) "(0 3 4 9)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 330 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12" (quote omlindberg::mod12) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "NUMBERS" -4))) (om-make-point 362 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 376 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 262 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 57 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 166 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POSITION" (quote position) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 46 421) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 459 316) (om-make-point 58 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 30 20) "nil" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 471 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 48 245) (om-make-point 80 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 52 20) "(0 3 4 9)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 564 351) (om-make-point 80 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 52 20) "(0 1 4 7)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 237 350) (om-make-point 80 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 52 20) "(9 0 3 4)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 352 348) (om-make-point 80 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 52 20) "(0 3 6 7)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME" (quote omlindberg::prime) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "CHORD-PC" (list 2 5 7 8 10 11)))) (om-make-point 585 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME1" (quote omlindberg::prime1) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "CHORD-PC" (list 2 5 7 8 10 11)))) (om-make-point 370 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER" (quote omlindberg::normal-order) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "LIST-OF-PCS" (list 2 5 7 8 10 11)))) (om-make-point 238 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 180 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->PC" (quote omlindberg::mc->pc) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MCS-LIST" (list 6000 6100 6300 6400 6600 6900)))) (om-make-point 263 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 309 32) (om-make-point 143 30) (list 6000 6400 6900 7500) "(6000 6400 6900 7500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (6 0 1 1 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (14 0 3 1 nil 0) (5 0 4 0 nil 0) (16 0 5 0 nil 0) (7 0 6 0 nil 0) (17 0 6 1 nil 0) (5 0 7 1 nil 0) (9 0 8 0 nil 0) (15 0 9 0 nil 0) (14 0 9 1 nil 0) (17 0 10 0 nil 0) (14 0 11 0 nil 0) (16 0 12 0 nil 0) (15 0 13 0 nil 0) (17 0 14 0 nil 0) (17 0 15 0 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0))) nil 7.02))
