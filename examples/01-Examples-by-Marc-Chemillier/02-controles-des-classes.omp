; OM File Header - Saved 2023/05/05 21:27:05
; (7.02 :patc (om-make-point 171.0D0 88) (om-make-point 48 49) (om-make-point 681 551) "" 183 0 "2023/04/26 00:35:28" "2023/05/05 21:27:05")
; End File Header
(in-package :om)(load-lib-for (quote ("OMLindberg")))(setf *om-current-persistent* (om-load-patch1 "02-controles-des-classes" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 6" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 14 259) (om-make-point 109 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 81 20) "(0 2 6 9 11 3)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 53 393) (om-make-point 107 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 79 20) "(9 11 0 2 3 6)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 302 388) (om-make-point 102 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 74 20) "(0 1 3 4 6 9)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 178 392) (om-make-point 109 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 81 20) "(0 2 3 5 6 9)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 498 273) (om-make-point 102 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 74 20) "(0 1 2 3 4 5)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 384 271) (om-make-point 83 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 55 20) "6-27b" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 533 155) (om-make-point 39 30) (quote |6-1|) "6-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC" (quote omlindberg::pc) (quote ((om-load-inputfun (quote input-funbox) "Symbol or List" "SET-CLASS" (list (quote |6-27A|) (list (quote |3-3A|) (quote |3-3B|)) (list (quote |6-27B|)))))) (om-make-point 531 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 251 12) (om-make-point 217 30) (list 6000 6200 6600 6900 7100 7500) "(6000 6200 6600 6900 7100 7500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 339 48) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6600 6900 7100 7500)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->PC" (quote omlindberg::mc->pc) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MCS-LIST" (list 6000 6100 6300 6400 6600 6900)))) (om-make-point 233 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC?" (quote omlindberg::pc?) (quote ((om-load-inputfun (quote input-funbox) "List of midics" "MIDICS" (list 6000 6300 6400)))) (om-make-point 408 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME1" (quote omlindberg::prime1) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "CHORD-PC" (list 2 5 7 8 10 11)))) (om-make-point 210 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME" (quote omlindberg::prime) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "CHORD-PC" (list 2 5 7 8 10 11)))) (om-make-point 335 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER" (quote omlindberg::normal-order) (quote ((om-load-inputfun (quote input-funbox) "pitch-classes" "LIST-OF-PCS" (list 2 5 7 8 10 11)))) (om-make-point 69 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (14 0 1 0 nil 0) (13 0 2 0 nil 0) (12 0 3 0 nil 0) (7 0 4 0 nil 0) (11 0 5 0 nil 0) (6 0 7 0 nil 0) (8 0 9 1 nil 0) (9 1 10 0 nil 0) (9 1 11 0 nil 0) (10 0 12 0 nil 0) (10 0 13 0 nil 0) (10 0 14 0 nil 0))) nil 7.02))
